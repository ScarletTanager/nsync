// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/cloudfoundry-incubator/nsync/bulk"
	"github.com/cloudfoundry-incubator/runtime-schema/cc_messages"
	"github.com/pivotal-golang/lager"
)

type FakeFetcher struct {
	FetchFingerprintsStub        func(logger lager.Logger, cancel <-chan struct{}, desiredAppFingerprints chan<- []cc_messages.CCDesiredAppFingerprint, httpClient *http.Client) error
	fetchFingerprintsMutex       sync.RWMutex
	fetchFingerprintsArgsForCall []struct {
		logger                 lager.Logger
		cancel                 <-chan struct{}
		desiredAppFingerprints chan<- []cc_messages.CCDesiredAppFingerprint
		httpClient             *http.Client
	}
	fetchFingerprintsReturns struct {
		result1 error
	}
	FetchDesiredAppsStub        func(logger lager.Logger, cancel <-chan struct{}, desiredAppFingerprints <-chan []cc_messages.CCDesiredAppFingerprint, desireAppRequestsFromCC chan<- []cc_messages.DesireAppRequestFromCC, httpClient *http.Client) error
	fetchDesiredAppsMutex       sync.RWMutex
	fetchDesiredAppsArgsForCall []struct {
		logger                  lager.Logger
		cancel                  <-chan struct{}
		desiredAppFingerprints  <-chan []cc_messages.CCDesiredAppFingerprint
		desireAppRequestsFromCC chan<- []cc_messages.DesireAppRequestFromCC
		httpClient              *http.Client
	}
	fetchDesiredAppsReturns struct {
		result1 error
	}
}

func (fake *FakeFetcher) FetchFingerprints(logger lager.Logger, cancel <-chan struct{}, desiredAppFingerprints chan<- []cc_messages.CCDesiredAppFingerprint, httpClient *http.Client) error {
	fake.fetchFingerprintsMutex.Lock()
	fake.fetchFingerprintsArgsForCall = append(fake.fetchFingerprintsArgsForCall, struct {
		logger                 lager.Logger
		cancel                 <-chan struct{}
		desiredAppFingerprints chan<- []cc_messages.CCDesiredAppFingerprint
		httpClient             *http.Client
	}{logger, cancel, desiredAppFingerprints, httpClient})
	fake.fetchFingerprintsMutex.Unlock()
	if fake.FetchFingerprintsStub != nil {
		return fake.FetchFingerprintsStub(logger, cancel, desiredAppFingerprints, httpClient)
	} else {
		return fake.fetchFingerprintsReturns.result1
	}
}

func (fake *FakeFetcher) FetchFingerprintsCallCount() int {
	fake.fetchFingerprintsMutex.RLock()
	defer fake.fetchFingerprintsMutex.RUnlock()
	return len(fake.fetchFingerprintsArgsForCall)
}

func (fake *FakeFetcher) FetchFingerprintsArgsForCall(i int) (lager.Logger, <-chan struct{}, chan<- []cc_messages.CCDesiredAppFingerprint, *http.Client) {
	fake.fetchFingerprintsMutex.RLock()
	defer fake.fetchFingerprintsMutex.RUnlock()
	return fake.fetchFingerprintsArgsForCall[i].logger, fake.fetchFingerprintsArgsForCall[i].cancel, fake.fetchFingerprintsArgsForCall[i].desiredAppFingerprints, fake.fetchFingerprintsArgsForCall[i].httpClient
}

func (fake *FakeFetcher) FetchFingerprintsReturns(result1 error) {
	fake.FetchFingerprintsStub = nil
	fake.fetchFingerprintsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFetcher) FetchDesiredApps(logger lager.Logger, cancel <-chan struct{}, desiredAppFingerprints <-chan []cc_messages.CCDesiredAppFingerprint, desireAppRequestsFromCC chan<- []cc_messages.DesireAppRequestFromCC, httpClient *http.Client) error {
	fake.fetchDesiredAppsMutex.Lock()
	fake.fetchDesiredAppsArgsForCall = append(fake.fetchDesiredAppsArgsForCall, struct {
		logger                  lager.Logger
		cancel                  <-chan struct{}
		desiredAppFingerprints  <-chan []cc_messages.CCDesiredAppFingerprint
		desireAppRequestsFromCC chan<- []cc_messages.DesireAppRequestFromCC
		httpClient              *http.Client
	}{logger, cancel, desiredAppFingerprints, desireAppRequestsFromCC, httpClient})
	fake.fetchDesiredAppsMutex.Unlock()
	if fake.FetchDesiredAppsStub != nil {
		return fake.FetchDesiredAppsStub(logger, cancel, desiredAppFingerprints, desireAppRequestsFromCC, httpClient)
	} else {
		return fake.fetchDesiredAppsReturns.result1
	}
}

func (fake *FakeFetcher) FetchDesiredAppsCallCount() int {
	fake.fetchDesiredAppsMutex.RLock()
	defer fake.fetchDesiredAppsMutex.RUnlock()
	return len(fake.fetchDesiredAppsArgsForCall)
}

func (fake *FakeFetcher) FetchDesiredAppsArgsForCall(i int) (lager.Logger, <-chan struct{}, <-chan []cc_messages.CCDesiredAppFingerprint, chan<- []cc_messages.DesireAppRequestFromCC, *http.Client) {
	fake.fetchDesiredAppsMutex.RLock()
	defer fake.fetchDesiredAppsMutex.RUnlock()
	return fake.fetchDesiredAppsArgsForCall[i].logger, fake.fetchDesiredAppsArgsForCall[i].cancel, fake.fetchDesiredAppsArgsForCall[i].desiredAppFingerprints, fake.fetchDesiredAppsArgsForCall[i].desireAppRequestsFromCC, fake.fetchDesiredAppsArgsForCall[i].httpClient
}

func (fake *FakeFetcher) FetchDesiredAppsReturns(result1 error) {
	fake.FetchDesiredAppsStub = nil
	fake.fetchDesiredAppsReturns = struct {
		result1 error
	}{result1}
}

var _ bulk.Fetcher = new(FakeFetcher)
