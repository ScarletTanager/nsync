// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/nsync/recipebuilder"
	"github.com/cloudfoundry-incubator/receptor"
	"github.com/cloudfoundry-incubator/runtime-schema/cc_messages"
)

type FakeRecipeBuilder struct {
	BuildStub        func(*cc_messages.DesireAppRequestFromCC) (*receptor.DesiredLRPCreateRequest, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 *cc_messages.DesireAppRequestFromCC
	}
	buildReturns struct {
		result1 *receptor.DesiredLRPCreateRequest
		result2 error
	}
	ExtractExposedPortStub        func(executionMetadata string) (uint16, error)
	extractExposedPortMutex       sync.RWMutex
	extractExposedPortArgsForCall []struct {
		executionMetadata string
	}
	extractExposedPortReturns struct {
		result1 uint16
		result2 error
	}
}

func (fake *FakeRecipeBuilder) Build(arg1 *cc_messages.DesireAppRequestFromCC) (*receptor.DesiredLRPCreateRequest, error) {
	fake.buildMutex.Lock()
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 *cc_messages.DesireAppRequestFromCC
	}{arg1})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub(arg1)
	} else {
		return fake.buildReturns.result1, fake.buildReturns.result2
	}
}

func (fake *FakeRecipeBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeRecipeBuilder) BuildArgsForCall(i int) *cc_messages.DesireAppRequestFromCC {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.buildArgsForCall[i].arg1
}

func (fake *FakeRecipeBuilder) BuildReturns(result1 *receptor.DesiredLRPCreateRequest, result2 error) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 *receptor.DesiredLRPCreateRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeRecipeBuilder) ExtractExposedPort(executionMetadata string) (uint16, error) {
	fake.extractExposedPortMutex.Lock()
	fake.extractExposedPortArgsForCall = append(fake.extractExposedPortArgsForCall, struct {
		executionMetadata string
	}{executionMetadata})
	fake.extractExposedPortMutex.Unlock()
	if fake.ExtractExposedPortStub != nil {
		return fake.ExtractExposedPortStub(executionMetadata)
	} else {
		return fake.extractExposedPortReturns.result1, fake.extractExposedPortReturns.result2
	}
}

func (fake *FakeRecipeBuilder) ExtractExposedPortCallCount() int {
	fake.extractExposedPortMutex.RLock()
	defer fake.extractExposedPortMutex.RUnlock()
	return len(fake.extractExposedPortArgsForCall)
}

func (fake *FakeRecipeBuilder) ExtractExposedPortArgsForCall(i int) string {
	fake.extractExposedPortMutex.RLock()
	defer fake.extractExposedPortMutex.RUnlock()
	return fake.extractExposedPortArgsForCall[i].executionMetadata
}

func (fake *FakeRecipeBuilder) ExtractExposedPortReturns(result1 uint16, result2 error) {
	fake.ExtractExposedPortStub = nil
	fake.extractExposedPortReturns = struct {
		result1 uint16
		result2 error
	}{result1, result2}
}

var _ recipebuilder.RecipeBuilder = new(FakeRecipeBuilder)
